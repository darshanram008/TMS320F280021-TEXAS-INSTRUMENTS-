//###########################################################################
//
// FILE:   adc_ex5_soc_continuous.c
//
// TITLE:  ADC continuous self-triggering.
//
//! \addtogroup driver_example_list
//! <h1> ADC Continuous Triggering (adc_soc_continuous)</h1>
//!
//! This example sets up the ADC to convert continuously, achieving maximum
//! sampling rate.\n
//!
//! \b External \b Connections \n
//!  - A0 pin should be connected to signal to convert
//!
//! \b Watch \b Variables \n
//! - \b adcAResults - A sequence of analog-to-digital conversion samples
//! from pin A0. The time between samples is the minimum possible based on the
//! ADC speed.
//
//#############################################################################
//
//
// $Copyright:
// Copyright (C) 2022 Texas Instruments Incorporated - http://www.ti.com/
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
//   Redistributions of source code must retain the above copyright 
//   notice, this list of conditions and the following disclaimer.
// 
//   Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the 
//   documentation and/or other materials provided with the   
//   distribution.
// 
//   Neither the name of Texas Instruments Incorporated nor the names of
//   its contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// $
//#############################################################################
//

//
// Included Files
//
#include "driverlib.h"
#include "device.h"
#include "board.h"

//
// Defines
//
#define RESULTS_BUFFER_SIZE     2//buffer for storing conversion results
                                //(size must be multiple of 16)

//
// Globals
//
uint16_t adcAResults[RESULTS_BUFFER_SIZE];
uint16_t resultsIndex;

EPWM_SignalParams pwmSignal =
            {15000, 0.5f, 0.2f, false, DEVICE_SYSCLK_FREQ,
            EPWM_COUNTER_MODE_UP_DOWN, EPWM_CLOCK_DIVIDER_1,
            EPWM_HSCLOCK_DIVIDER_1};


void pwm()
{
          SysCtl_disablePeripheral(SYSCTL_PERIPH_CLK_TBCLKSYNC);
         EPWM_configureSignal(EPWM1_BASE, &pwmSignal);
         EPWM_disablePhaseShiftLoad(EPWM1_BASE);
         EPWM_setPhaseShift(EPWM1_BASE, 0U);
         EPWM_enableSyncOutPulseSource(EPWM1_BASE, EPWM_SYNC_OUT_PULSE_ON_CNTR_ZERO);
         SysCtl_enablePeripheral(SYSCTL_PERIPH_CLK_TBCLKSYNC);
         Interrupt_enable(INT_EPWM1);
         EINT;
         ERTM;

}
void ADC()
{
    ADC_setupSOC(myADC0_BASE, ADC_SOC_NUMBER2 ,   ADC_TRIGGER_SW_ONLY , ADC_CH_ADCIN2 ,75  );
          ADC_setVREF(myADC0_BASE,  ADC_REFERENCE_INTERNAL, ADC_REFERENCE_2_5V);

          ADC_setOffsetTrimAll(ADC_REFERENCE_INTERNAL,ADC_REFERENCE_2_5V);
         DEVICE_DELAY_US(5000);
                 //
                 // Enable ADC interrupts
                 //
          ADC_enableInterrupt(myADC0_BASE, ADC_INT_NUMBER1);
          ADC_enableInterrupt(myADC0_BASE, ADC_INT_NUMBER2);
          ADC_enableInterrupt(myADC0_BASE, ADC_INT_NUMBER3);
          ADC_enableInterrupt(myADC0_BASE, ADC_INT_NUMBER4);
                 //
                 // Clear all interrupts flags(INT1-4)
                 //
                 HWREGH(myADC0_BASE + ADC_O_INTFLGCLR) = 0x000F;
resultsIndex = 0;
                 //
                 // Software force start SOC0 to SOC7
                 //
                 HWREGH(myADC0_BASE + ADC_O_SOCFRC1) = 0x00FF;
             
                           // Wait for first set of 8 conversions to complete
                           //
while(resultsIndex < RESULTS_BUFFER_SIZE)
{
                           while(false == ADC_getInterruptStatus(myADC0_BASE, ADC_INT_NUMBER3));

                           //
                           // Clear the interrupt flag
                           //
                           ADC_clearInterruptStatus(myADC0_BASE, ADC_INT_NUMBER3);


                           adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER1) * factor); //Results stored in adaAResults[2]
                            adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER2) * factor); 
                                /*****disable interrupts*****/
                                 ADC_disableInterrupt(myADC0_BASE, ADC_INT_NUMBER1);
                                 ADC_disableInterrupt(myADC0_BASE, ADC_INT_NUMBER2);
                                 ADC_disableInterrupt(myADC0_BASE, ADC_INT_NUMBER3);
                                 ADC_disableInterrupt(myADC0_BASE, ADC_INT_NUMBER4);


}

void main(void)
{
    //
    // Initialize device clock and peripherals
    //
    Device_init();

    //
    // Disable pin locks and enable internal pullups.
    //
    Device_initGPIO();
    GPIO_setPadConfig(33 , GPIO_PIN_TYPE_PULLUP);
    GPIO_setDirectionMode(33 ,GPIO_DIR_MODE_OUT );

 GPIO_setPadConfig(0, GPIO_PIN_TYPE_PULLUP);
    GPIO_setDirectionMode(0, GPIO_DIR_MODE_OUT);


    //
    // Initialize PIE and clear PIE registers. Disables CPU interrupts.
    //
    Interrupt_initModule();

    //
    // Initialize the PIE vector table with pointers to the shell Interrupt
    // Service Routines (ISR).
    //
    Interrupt_initVectorTable();

    //
    // Board Initialization
    // - Configure the ADC and power it up
    // - Setup the ADC for continuous conversions on channel 0
    //
    Board_init();

    //
    // Initialize results buffer
    //
    /*for(resultsIndex = 0; resultsIndex < RESULTS_BUFFER_SIZE; resultsIndex++)
    {
        adcAResults[resultsIndex] = 0;
    }
    resultsIndex = 0;*/

    //
    // Enable global Interrupts and higher priority real-time debug events:
    //
    EINT;  // Enable Global interrupt INTM
    ERTM;  // Enable Global realtime interrupt DBGM

    //
    // Take conversions indefinitely in loop
    //
       GPIO_writePin(0 ,1 );
    DEVICE_DELAY_US(4000000);
    GPIO_writePin(33 ,1);
    DEVICE_DELAY_US(1000000);
        GPIO_writePin(0, 0);
    while(1)
    {




       ADC();
       if(adcAResults[2] > 1600 && adcAResults[2] < 1700)
       {
           if(pwmSignal.dutyValB >= 0.1f && pwmSignal.dutyValB <= 0.8f)
           {
               pwmSignal.dutyValB =  pwmSignal.dutyValB;
               pwm();
           }
           else
               break;
       }
       else if(adcAResults[2] >= 1700 )
       {
           if(pwmSignal.dutyValB >= 0.1f && pwmSignal.dutyValB <= 0.8f)
           {
                pwmSignal.dutyValB -= 0.1f;
                pwm();
           }
           else
               break;

       }
       else if(adcAResults[2] <= 1600)
       {
           if(pwmSignal.dutyValB >= 0.1f && pwmSignal.dutyValB <= 0.8f)
           {
               pwmSignal.dutyValB += 0.1f;
               pwm();
           }
           else
               break;
       }


    }


        //
        // Initialize results index
        //
       // resultsIndex = 0;


        //
        // Keep taking samples until the results buffer is full
        //
        //while(resultsIndex < RESULTS_BUFFER_SIZE)



            //
            // Save results for first 8 conversions
            //
            // Note that during this time, the second 8 conversions have
            // already been triggered by EOC6->ADCIN1 and will be actively
            // converting while first 8 results are being saved
            //
            //adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE,ADC_SOC_NUMBER0));

           // adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE,ADC_SOC_NUMBER1));


           // adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER3));

            //adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE,ADC_SOC_NUMBER4));

           // adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER5));

           // adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER6);

           // adcAResults[resultsIndex++] = (ADC_readResult(ADCARESULT_BASE, ADC_SOC_NUMBER7));


            //
            // Wait for the second set of 8 conversions to complete
            //
           // while(false == ADC_getInterruptStatus(myADC0_BASE, ADC_INT_NUMBER4));

            //
            // Clear the interrupt flag
            //
          //  ADC_clearInterruptStatus(myADC0_BASE, ADC_INT_NUMBER4);

            //
            // Save results for second 8 conversions
            //
            // Note that during this time, the first 8 conversions have
            // already been triggered by EOC14->ADCIN2 and will be actively
            // converting while second 8 results are being saved
            //
           /* adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER8);
            adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER9);
            adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER10);
            adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER11);
            adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER12);
            adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER13);
            adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER14);
            adcAResults[resultsIndex++] = ADC_readResult(ADCARESULT_BASE,
                                                         ADC_SOC_NUMBER15);
        }*/

        //
        // Disable all ADCINT flags to stop sampling
        //


        //
        // At this point, adcAResults[] contains a sequence of conversions
        // from the selected channel
        //

        //
        // Software breakpoint, hit run again to get updated conversions
        //
        //asm("   ESTOP0");

     // Loop forever

}

//
// End of file
//
